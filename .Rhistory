"[12][0-9]{3}")
new_data_weekly <- path_to_labdat_file %>%
read_weekly() %>%
scrape_labdatxls(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
# One of the files has "<1 entered instead of <1 in one of the cells, which
# messes with all future use of the data
position_double_quotes <- which(grepl("\"<1", new_data_weekly$result))
new_data_weekly$result[position_double_quotes] <-
str_remove(new_data_weekly$result[position_double_quotes], pattern = "\"")
# WTP DOC Profile sheet exists only in some sheets from 2001 onwards
if ("WTP DOC Profile" %in% excel_sheets(path_to_labdat_file)) {
new_data_doc <- path_to_labdat_file %>%
read_doc() %>%
scrape_docprofiles(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
} else {
new_data_doc <- as.data.frame(NULL)
}
new_data <- rbind(new_data_weekly, new_data_doc)
new_data <- update_parameters(new_data, file_sheet_year, labdat_parameters)
new_data <- new_data %T>%
# Warning arises when script converts certain results to numeric format
# (ex "--" as an indicator for an incalculable value), but
# suppressWarnings is not for use in pipes. {options} is the alternative
{options(warn = -1)} %>%
# Create a new column for the original result and force character in case of
# non numeric values (ex: "uncalculable", "<1", "--", ...)
mutate(result_org  = as.character(result),
result_flag = "",
result      = as.numeric(result)) %T>%
{options(warn = 0)} %>%
round_values() %>%
replace_dl() %>%
convert_biocounts() %>%
convert_UV254()
ions <- weekly_data %>%
mutate(datasheet = case_when(row_number() > silica_included_start_rw &
row_number() <= silica_included_start_rw + 3
~ "Raw",
row_number() > silica_included_start_cw &
row_number() <= silica_included_start_cw + 3
~ "Clearwell"),
station   = case_when(row_number() > silica_included_start_rw &
row_number() <= silica_included_start_rw + 3
~ "Raw",
row_number() > silica_included_start_cw &
row_number() <= silica_included_start_cw + 3
~ "Clearwell")) %>%
filter(!is.na(station),
# Don't want to read in Difference values, just % Difference
!grepl("^difference$", Parameters, ignore.case = TRUE))
print("Applying calculations...")
# join() and summarise() functions print messages to the console that we don't
# need to see
new_data_calcs <- suppressMessages(apply_calculations(new_data %>%
filter(datasheet != "DOCProfile"),
file_sheet_year))
new_dataa <- new_data %>%
full_join(new_data_calcs, by = c("datasheet", "sheet_year", "station",
"date_ymd", "parameter", "unit",
"parm_tag")) %>%
mutate(result    = case_when(!is.na(parm_eval.y) ~ result.y,
TRUE ~ result.x),
parm_eval = case_when(!is.na(parm_eval.y) ~ parm_eval.y,
TRUE ~ parm_eval.x)) %>%
mutate(year  = year(date_ymd),
month = month(date_ymd, label = TRUE),
day   = day(date_ymd),
day_num   = yday(date_ymd),
week_num  = week(date_ymd)) %>%
select(datasheet, sheet_year, station, date_ymd,
parameter, unit,	parm_eval, parm_tag,
result, result_org, result_flag) %>%
mutate_if(is.character, as.factor)
View(new_dataa)
d <- new_dataa %>% group_by(parameter, unit, parm_eval) %>% summarise(n())
View(d)
path_to_labdat_file <- "../../uSask_2022/Buffalo Pound/data/labdat_datafiles/2000_routine_labdat.xlsx"
file_sheet_year <- str_extract(last(unlist(str_split(path_to_labdat_file,
"/"))),
"[12][0-9]{3}")
new_data_weekly <- path_to_labdat_file %>%
read_weekly() %>%
scrape_labdatxls(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
# One of the files has "<1 entered instead of <1 in one of the cells, which
# messes with all future use of the data
position_double_quotes <- which(grepl("\"<1", new_data_weekly$result))
new_data_weekly$result[position_double_quotes] <-
str_remove(new_data_weekly$result[position_double_quotes], pattern = "\"")
# WTP DOC Profile sheet exists only in some sheets from 2001 onwards
if ("WTP DOC Profile" %in% excel_sheets(path_to_labdat_file)) {
new_data_doc <- path_to_labdat_file %>%
read_doc() %>%
scrape_docprofiles(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
} else {
new_data_doc <- as.data.frame(NULL)
}
new_data <- rbind(new_data_weekly, new_data_doc)
if (nrow(new_data) == 0) {
stop("Database file is already updated. There is no data to add. Cancelling update.",
call. = FALSE)
} else {
print("There exists data to add to the database. Processing...")
}
# Processing data to add -----------------------------------------------------
print("Updating parameters...")
new_data <- update_parameters(new_data, file_sheet_year, labdat_parameters)
new_data <- new_data %T>%
# Warning arises when script converts certain results to numeric format
# (ex "--" as an indicator for an incalculable value), but
# suppressWarnings is not for use in pipes. {options} is the alternative
{options(warn = -1)} %>%
# Create a new column for the original result and force character in case of
# non numeric values (ex: "uncalculable", "<1", "--", ...)
mutate(result_org  = as.character(result),
result_flag = "",
result      = as.numeric(result)) %T>%
{options(warn = 0)} %>%
round_values() %>%
replace_dl() %>%
convert_biocounts() %>%
convert_UV254()
# join() and summarise() functions print messages to the console that we don't
# need to see
new_data_calcs <- suppressMessages(apply_calculations(new_data %>%
filter(datasheet != "DOCProfile"),
file_sheet_year))
new_dataa <- new_data %>%
full_join(new_data_calcs, by = c("datasheet", "sheet_year", "station",
"date_ymd", "parameter", "unit",
"parm_tag")) %>%
mutate(result    = case_when(!is.na(parm_eval.y) ~ result.y,
TRUE ~ result.x),
parm_eval = case_when(!is.na(parm_eval.y) ~ parm_eval.y,
TRUE ~ parm_eval.x)) %>%
mutate(year  = year(date_ymd),
month = month(date_ymd, label = TRUE),
day   = day(date_ymd),
day_num   = yday(date_ymd),
week_num  = week(date_ymd)) %>%
select(datasheet, sheet_year, station, date_ymd,
parameter, unit,	parm_eval, parm_tag,
result, result_org, result_flag) %>%
mutate_if(is.character, as.factor)
d <- new_dataa %>% group_by(parameter, unit, parm_eval) %>% summarise(n())
View(d)
path_to_labdat_file <- "../../uSask_2022/Buffalo Pound/data/labdat_datafiles/2010_routine_labdat.xlsx"
file_sheet_year <- str_extract(last(unlist(str_split(path_to_labdat_file,
"/"))),
"[12][0-9]{3}")
new_data_weekly <- path_to_labdat_file %>%
read_weekly() %>%
scrape_labdatxls(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
# One of the files has "<1 entered instead of <1 in one of the cells, which
# messes with all future use of the data
position_double_quotes <- which(grepl("\"<1", new_data_weekly$result))
new_data_weekly$result[position_double_quotes] <-
str_remove(new_data_weekly$result[position_double_quotes], pattern = "\"")
# WTP DOC Profile sheet exists only in some sheets from 2001 onwards
if ("WTP DOC Profile" %in% excel_sheets(path_to_labdat_file)) {
new_data_doc <- path_to_labdat_file %>%
read_doc() %>%
scrape_docprofiles(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
} else {
new_data_doc <- as.data.frame(NULL)
}
new_data <- rbind(new_data_weekly, new_data_doc)
if (nrow(new_data) == 0) {
stop("Database file is already updated. There is no data to add. Cancelling update.",
call. = FALSE)
} else {
print("There exists data to add to the database. Processing...")
}
# Processing data to add -----------------------------------------------------
print("Updating parameters...")
new_data <- update_parameters(new_data, file_sheet_year, labdat_parameters)
new_data <- new_data %T>%
# Warning arises when script converts certain results to numeric format
# (ex "--" as an indicator for an incalculable value), but
# suppressWarnings is not for use in pipes. {options} is the alternative
{options(warn = -1)} %>%
# Create a new column for the original result and force character in case of
# non numeric values (ex: "uncalculable", "<1", "--", ...)
mutate(result_org  = as.character(result),
result_flag = "",
result      = as.numeric(result)) %T>%
{options(warn = 0)} %>%
round_values() %>%
replace_dl() %>%
convert_biocounts() %>%
convert_UV254()
# join() and summarise() functions print messages to the console that we don't
# need to see
new_data_calcs <- suppressMessages(apply_calculations(new_data %>%
filter(datasheet != "DOCProfile"),
file_sheet_year))
rm(d, new_data, new_data_calcs, new_data_doc, new_data_weekly, new_dataa, file_sheet_year)
path_to_labdat_file <- "../../uSask_2022/Buffalo Pound/data/labdat_datafiles/2000_routine_labdat.xlsx"
file_sheet_year <- str_extract(last(unlist(str_split(path_to_labdat_file,
"/"))),
"[12][0-9]{3}")
new_data_weekly <- path_to_labdat_file %>%
read_weekly() %>%
scrape_labdatxls(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
# One of the files has "<1 entered instead of <1 in one of the cells, which
# messes with all future use of the data
position_double_quotes <- which(grepl("\"<1", new_data_weekly$result))
new_data_weekly$result[position_double_quotes] <-
str_remove(new_data_weekly$result[position_double_quotes], pattern = "\"")
# WTP DOC Profile sheet exists only in some sheets from 2001 onwards
if ("WTP DOC Profile" %in% excel_sheets(path_to_labdat_file)) {
new_data_doc <- path_to_labdat_file %>%
read_doc() %>%
scrape_docprofiles(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
} else {
new_data_doc <- as.data.frame(NULL)
}
new_data <- rbind(new_data_weekly, new_data_doc)
if (nrow(new_data) == 0) {
stop("Database file is already updated. There is no data to add. Cancelling update.",
call. = FALSE)
} else {
print("There exists data to add to the database. Processing...")
}
# Processing data to add -----------------------------------------------------
print("Updating parameters...")
new_data <- update_parameters(new_data, file_sheet_year, labdat_parameters)
new_data <- new_data %T>%
# Warning arises when script converts certain results to numeric format
# (ex "--" as an indicator for an incalculable value), but
# suppressWarnings is not for use in pipes. {options} is the alternative
{options(warn = -1)} %>%
# Create a new column for the original result and force character in case of
# non numeric values (ex: "uncalculable", "<1", "--", ...)
mutate(result_org  = as.character(result),
result_flag = "",
result      = as.numeric(result)) %T>%
{options(warn = 0)} %>%
round_values() %>%
replace_dl() %>%
convert_biocounts() %>%
convert_UV254()
print("Applying calculations...")
# join() and summarise() functions print messages to the console that we don't
# need to see
new_data_calcs <- suppressMessages(apply_calculations(new_data %>%
filter(datasheet != "DOCProfile"),
file_sheet_year))
new_dataa <- new_data %>%
full_join(new_data_calcs, by = c("datasheet", "sheet_year", "station",
"date_ymd", "parameter", "unit",
"parm_tag")) %>%
mutate(result    = case_when(!is.na(parm_eval.y) ~ result.y,
TRUE ~ result.x),
parm_eval = case_when(!is.na(parm_eval.y) ~ parm_eval.y,
TRUE ~ parm_eval.x)) %>%
mutate(year  = year(date_ymd),
month = month(date_ymd, label = TRUE),
day   = day(date_ymd),
day_num   = yday(date_ymd),
week_num  = week(date_ymd)) %>%
select(datasheet, sheet_year, station, date_ymd,
parameter, unit,	parm_eval, parm_tag,
result, result_org, result_flag) %>%
mutate_if(is.character, as.factor)
d <- new_dataa %>% group_by(parameter, unit, parm_eval) %>% summarise(n())
View(d)
View(new_dataa)
rm(d, new_data, new_data_calcs, new_data_doc, new_data_weekly, new_dataa, file_sheet_year, d)
path_to_labdat_file <- "../../uSask_2022/Buffalo Pound/data/labdat_datafiles/2010_routine_labdat.xlsx"
file_sheet_year <- str_extract(last(unlist(str_split(path_to_labdat_file,
"/"))),
"[12][0-9]{3}")
new_data_weekly <- path_to_labdat_file %>%
read_weekly() %>%
scrape_labdatxls(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
# One of the files has "<1 entered instead of <1 in one of the cells, which
# messes with all future use of the data
position_double_quotes <- which(grepl("\"<1", new_data_weekly$result))
new_data_weekly$result[position_double_quotes] <-
str_remove(new_data_weekly$result[position_double_quotes], pattern = "\"")
# WTP DOC Profile sheet exists only in some sheets from 2001 onwards
if ("WTP DOC Profile" %in% excel_sheets(path_to_labdat_file)) {
new_data_doc <- path_to_labdat_file %>%
read_doc() %>%
scrape_docprofiles(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
} else {
new_data_doc <- as.data.frame(NULL)
}
new_data <- rbind(new_data_weekly, new_data_doc)
if (nrow(new_data) == 0) {
stop("Database file is already updated. There is no data to add. Cancelling update.",
call. = FALSE)
} else {
print("There exists data to add to the database. Processing...")
}
# Processing data to add -----------------------------------------------------
print("Updating parameters...")
new_data <- update_parameters(new_data, file_sheet_year, labdat_parameters)
new_data <- new_data %T>%
# Warning arises when script converts certain results to numeric format
# (ex "--" as an indicator for an incalculable value), but
# suppressWarnings is not for use in pipes. {options} is the alternative
{options(warn = -1)} %>%
# Create a new column for the original result and force character in case of
# non numeric values (ex: "uncalculable", "<1", "--", ...)
mutate(result_org  = as.character(result),
result_flag = "",
result      = as.numeric(result)) %T>%
{options(warn = 0)} %>%
round_values() %>%
replace_dl() %>%
convert_biocounts() %>%
convert_UV254()
print("Applying calculations...")
# join() and summarise() functions print messages to the console that we don't
# need to see
new_data_calcs <- suppressMessages(apply_calculations(new_data %>%
filter(datasheet != "DOCProfile"),
file_sheet_year))
new_dataa <- new_data %>%
full_join(new_data_calcs, by = c("datasheet", "sheet_year", "station",
"date_ymd", "parameter", "unit",
"parm_tag")) %>%
mutate(result    = case_when(!is.na(parm_eval.y) ~ result.y,
TRUE ~ result.x),
parm_eval = case_when(!is.na(parm_eval.y) ~ parm_eval.y,
TRUE ~ parm_eval.x)) %>%
mutate(year  = year(date_ymd),
month = month(date_ymd, label = TRUE),
day   = day(date_ymd),
day_num   = yday(date_ymd),
week_num  = week(date_ymd)) %>%
select(datasheet, sheet_year, station, date_ymd,
parameter, unit,	parm_eval, parm_tag,
result, result_org, result_flag) %>%
mutate_if(is.character, as.factor)
d <- new_dataa %>% group_by(parameter, unit, parm_eval) %>% summarise(n())
View(d)
View(new_dataa)
rm(d, new_data, new_data_calcs, new_data_doc, new_data_weekly, new_dataa, file_sheet_year)
path_to_labdat_file <- "../../uSask_2022/Buffalo Pound/data/labdat_datafiles/ROUTINE LAB DATA 2020 v 31DecF.xlsx"
file_sheet_year <- str_extract(last(unlist(str_split(path_to_labdat_file,
"/"))),
"[12][0-9]{3}")
new_data_weekly <- path_to_labdat_file %>%
read_weekly() %>%
scrape_labdatxls(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
# One of the files has "<1 entered instead of <1 in one of the cells, which
# messes with all future use of the data
position_double_quotes <- which(grepl("\"<1", new_data_weekly$result))
new_data_weekly$result[position_double_quotes] <-
str_remove(new_data_weekly$result[position_double_quotes], pattern = "\"")
# WTP DOC Profile sheet exists only in some sheets from 2001 onwards
if ("WTP DOC Profile" %in% excel_sheets(path_to_labdat_file)) {
new_data_doc <- path_to_labdat_file %>%
read_doc() %>%
scrape_docprofiles(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
} else {
new_data_doc <- as.data.frame(NULL)
}
new_data <- rbind(new_data_weekly, new_data_doc)
if (nrow(new_data) == 0) {
stop("Database file is already updated. There is no data to add. Cancelling update.",
call. = FALSE)
} else {
print("There exists data to add to the database. Processing...")
}
# Processing data to add -----------------------------------------------------
print("Updating parameters...")
new_data <- update_parameters(new_data, file_sheet_year, labdat_parameters)
new_data <- new_data %T>%
# Warning arises when script converts certain results to numeric format
# (ex "--" as an indicator for an incalculable value), but
# suppressWarnings is not for use in pipes. {options} is the alternative
{options(warn = -1)} %>%
# Create a new column for the original result and force character in case of
# non numeric values (ex: "uncalculable", "<1", "--", ...)
mutate(result_org  = as.character(result),
result_flag = "",
result      = as.numeric(result)) %T>%
{options(warn = 0)} %>%
round_values() %>%
replace_dl() %>%
convert_biocounts() %>%
convert_UV254()
print("Applying calculations...")
# join() and summarise() functions print messages to the console that we don't
# need to see
new_data_calcs <- suppressMessages(apply_calculations(new_data %>%
filter(datasheet != "DOCProfile"),
file_sheet_year))
new_dataa <- new_data %>%
full_join(new_data_calcs, by = c("datasheet", "sheet_year", "station",
"date_ymd", "parameter", "unit",
"parm_tag")) %>%
mutate(result    = case_when(!is.na(parm_eval.y) ~ result.y,
TRUE ~ result.x),
parm_eval = case_when(!is.na(parm_eval.y) ~ parm_eval.y,
TRUE ~ parm_eval.x)) %>%
mutate(year  = year(date_ymd),
month = month(date_ymd, label = TRUE),
day   = day(date_ymd),
day_num   = yday(date_ymd),
week_num  = week(date_ymd)) %>%
select(datasheet, sheet_year, station, date_ymd,
parameter, unit,	parm_eval, parm_tag,
result, result_org, result_flag) %>%
mutate_if(is.character, as.factor)
d <- new_dataa %>% group_by(parameter, unit, parm_eval) %>% summarise(n())
View(d)
View(new_dataa)
rm(d, new_data, new_data_calcs, new_data_doc, new_data_weekly, new_dataa, file_sheet_year)
path_to_labdat_file <- "../../uSask_2022/Buffalo Pound/data/labdat_datafiles/ROUTINE LAB DATA 2022 v FINAL.xlsx"
file_sheet_year <- str_extract(last(unlist(str_split(path_to_labdat_file,
"/"))),
"[12][0-9]{3}")
new_data_weekly <- path_to_labdat_file %>%
read_weekly() %>%
scrape_labdatxls(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
# One of the files has "<1 entered instead of <1 in one of the cells, which
# messes with all future use of the data
position_double_quotes <- which(grepl("\"<1", new_data_weekly$result))
new_data_weekly$result[position_double_quotes] <-
str_remove(new_data_weekly$result[position_double_quotes], pattern = "\"")
# WTP DOC Profile sheet exists only in some sheets from 2001 onwards
if ("WTP DOC Profile" %in% excel_sheets(path_to_labdat_file)) {
new_data_doc <- path_to_labdat_file %>%
read_doc() %>%
scrape_docprofiles(labdat_parameters) %>%
check_scraped_data(labdat_parameters) %>%
mutate(sheet_year = as.factor(file_sheet_year))
} else {
new_data_doc <- as.data.frame(NULL)
}
new_data <- rbind(new_data_weekly, new_data_doc)
if (nrow(new_data) == 0) {
stop("Database file is already updated. There is no data to add. Cancelling update.",
call. = FALSE)
} else {
print("There exists data to add to the database. Processing...")
}
# Processing data to add -----------------------------------------------------
print("Updating parameters...")
new_data <- update_parameters(new_data, file_sheet_year, labdat_parameters)
new_data <- new_data %T>%
# Warning arises when script converts certain results to numeric format
# (ex "--" as an indicator for an incalculable value), but
# suppressWarnings is not for use in pipes. {options} is the alternative
{options(warn = -1)} %>%
# Create a new column for the original result and force character in case of
# non numeric values (ex: "uncalculable", "<1", "--", ...)
mutate(result_org  = as.character(result),
result_flag = "",
result      = as.numeric(result)) %T>%
{options(warn = 0)} %>%
round_values() %>%
replace_dl() %>%
convert_biocounts() %>%
convert_UV254()
print("Applying calculations...")
# join() and summarise() functions print messages to the console that we don't
# need to see
new_data_calcs <- suppressMessages(apply_calculations(new_data %>%
filter(datasheet != "DOCProfile"),
file_sheet_year))
new_dataa <- new_data %>%
full_join(new_data_calcs, by = c("datasheet", "sheet_year", "station",
"date_ymd", "parameter", "unit",
"parm_tag")) %>%
mutate(result    = case_when(!is.na(parm_eval.y) ~ result.y,
TRUE ~ result.x),
parm_eval = case_when(!is.na(parm_eval.y) ~ parm_eval.y,
TRUE ~ parm_eval.x)) %>%
mutate(year  = year(date_ymd),
month = month(date_ymd, label = TRUE),
day   = day(date_ymd),
day_num   = yday(date_ymd),
week_num  = week(date_ymd)) %>%
select(datasheet, sheet_year, station, date_ymd,
parameter, unit,	parm_eval, parm_tag,
result, result_org, result_flag) %>%
mutate_if(is.character, as.factor)
d <- new_dataa %>% group_by(parameter, unit, parm_eval) %>% summarise(n())
View(d)
View(new_dataa)
rm(list = ls())
